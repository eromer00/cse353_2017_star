package starofstars;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.locks.ReentrantLock;

public class Node implements Runnable {

	public int Port = 0;
	public int identificationNumber;
	public int switchIdentification;

	private File directory;
	private File mainfile;
	private File in_file;
	
	private ArrayList<Frame> framesToSend;
	
	public Node(int identification, int switchIdentification) {
		this.identificationNumber = identification; //hold the node number make it global to object
		this.switchIdentification = switchIdentification;
				
		prepOutputFiles();
		readInputFiles();
		msg("Successfully assembled Frames for sending!");		
	}
	
	@Override
	public void run() { //when ran by the executor, it will send the arraylist of frames on their way...
		
		// TODO Auto-generated method stub
		
		//allowing testi
		/*if (Main.rng.nextFloat() < 0.05) {
			msg("Corrupting data...");
			frame.data = frame.data.substring(0, frame.data.length()/2);
		}
		if (Main.rng.nextFloat() < 0.05) {
			msg("Losing frame...");
			continue;
		}*/
		
	}
	
	//Create output files for corresponding node, make directory if it doesn't exist
	private void prepOutputFiles() {
		String dir = "./nodes/output";
		msg("START Creating Output File");
		try {
			mainfile = new File("./nodes/output/node"+ this.switchIdentification + "_" + this.identificationNumber + "output.txt");
			directory = new File(dir);
				
			//create the file if it doesn't exist
			if(directory.mkdir()) {
				msg("directory: \"" + dir +"\" didn't exist so I made it :)");
			}
			if(!mainfile.exists()) {		
				mainfile.createNewFile();
			}	
		}catch(Throwable e) {
			System.out.println("ERROR: create output file failed:" + e.toString());
		}		
	}
	
	private void readInputFiles() {
		BufferedReader br = null;
		String temp = null;
		int switch_dest = 0, node_dest = 0; 
		
		framesToSend = new ArrayList<Frame>();
		
		String data = null;
		try {	
			msg("START Reading input files...");
			in_file = new File("./nodes/node" + this.switchIdentification + "_" + this.identificationNumber + ".txt");
			br = new BufferedReader(new FileReader(in_file));
			
			while((temp = br.readLine()) != null) {
				String[] tmp = temp.split("_");
				String[] tmp2 = temp.split(",");
				
				switch_dest = Integer.parseInt(tmp[0].toString());
				node_dest = Character.getNumericValue(tmp[1].charAt(0));
				data = tmp2[1];		
				
				String src_string = "(" + this.switchIdentification + "," + this.identificationNumber + ")";
				String dst_string = "(" + switch_dest + "," + node_dest + ")";
				
				Frame fr = new Frame(); //there are multiple way to reconstruct the frame
				//new Frame(bytes of frame), reconstructs frame from bytes
				//new Frame(string generated by frame), also reconstructs
				//new Frame(), like how I did here...put everything in yourself
				
				fr.setIsEmpty(0); //be sure to set this to 0 when filling frame
				//this makes for an easier ACK setup
				
				fr.setSrc(src_string);
				//(switchnumber, this node number)
					
				fr.setDst(dst_string);
				//(destinationswitch, destination node)
				
				fr.setSize(data.length());
				//if 0 then frame is an ACK frame
				
				fr.setAcktype(3); 
				//0 no response in time out (resend again).
				//1 CRC error (resend again).
				//2 firewalled (no need to resend).
				//3 positive ACK. (successful delivery)
				
				fr.setData(data); //obvious so here's a joke/quote
				//"Be the change you wish to see in the world"
				//--50 cent
				
				fr.setCrc(fr.genCrc());
				//sum of byte values of the frame.
				//a checksum for destination node to check if data
				//arrived intact :)
				
				//Testing Frame Strings
				//msg(fr.toString());
				//msg(fr.getBytes().toString());
				//Frame fra = new Frame(fr.getBytes());
				//msg("PIMPSWAG: " + fra.toString());
				//Frame fr = new Frame(node_num, dest, data);
				
				framesToSend.add(fr);
				
				//all this is assembled right btw...
			}
		}catch (Exception e) {
			msg("ERROR READING IN FILE --> " + e.toString());
			e.printStackTrace();
		}
	}
	
	public int getPort() {
		return this.Port;
	}

	//make reporting soooooo much nicer
	private void msg (String input) {
		System.out.println("\t(" + (this.switchIdentification) + "," + this.identificationNumber +"): " 
				+ "Switch #" + this.switchIdentification + ": ---> Node#" + this.identificationNumber + " " + input);
	}

}
